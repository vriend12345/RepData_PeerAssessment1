{"name":"Repdata peerassessment1","tagline":"Peer Assessment 1 for Reproducible Research","body":"# Reproducible Research: Peer Assessment 1\r\n\r\n\r\n## Loading and preprocessing the data\r\nAfter setting the working directory, we execute the following code to load the dataset **activities** \r\n```{r loading_dataset}\r\nactivities <- read.csv(unz(\"activity.zip\", \"activity.csv\"))\r\n```\r\n\r\nLet's take a look at **activities** dataset.\r\n```{r srt_activities}\r\nstr(activities)\r\n```\r\n\r\nWe notice that the type of **date** variable in the **activities** dataset is Factor.  \r\nWe change it to be Date type using the following code.\r\n```{r transform_date}\r\nactivities <- transform(activities, date = as.Date(date,\"%Y-%m-%d\"))\r\n```\r\n\r\n\r\n## What is mean total number of steps taken per day?\r\n\r\n### Making a histogram of the total number of steps taken each day\r\nIn order to do that we first calculate the steps per day applying this code.\r\n```{r sum_steps_per_day}\r\nStepsPerDay <- aggregate(activities[\"steps\"], by=activities[\"date\"], FUN=sum, na.rm=TRUE)\r\n```\r\n\r\nThen we plot a histogram that shows the total steps taken on a daily basis\r\n```{r histogram}\r\nplot(StepsPerDay$date, StepsPerDay$steps, type=\"h\", lwd=3, col=\"green\", xlab=\"Date\", \r\n     ylab=\"Total steps\", main=\"Total steps taken each day\")\r\n```\r\n\r\n### Calculating and reporting the mean and median total number of steps taken per day\r\n\r\n```{r mean_median}\r\nMean <- mean(StepsPerDay$steps, na.rm=TRUE)\r\nsprintf(\"Mean = %.2f\", Mean)\r\nMedian <- median(StepsPerDay$steps, na.rm=TRUE)\r\nsprintf(\"Median = %.2f\", Median)\r\n```\r\n\r\n\r\n## What is the average daily activity pattern?\r\n\r\n### Making a time series plot of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)\r\n\r\nIn order to do that we first calculate the average number of steps per interval applying this code.\r\n```{r sum_steps_per_interval}\r\nStepsPerInterval <- aggregate(activities[\"steps\"], by=activities[\"interval\"], FUN=mean, na.rm=TRUE)\r\n```\r\n\r\nThen we plot a time series plot that shows the average number of steps taken on 5-minute interval averaged across all days.\r\n```{r time_series}\r\nplot(StepsPerInterval$interval, StepsPerInterval$steps, type=\"l\", lwd=2, col=\"blue\",\r\n     xlab=\"5-minute interval\", ylab=\"Average number of steps\", \r\n     main=\"Average steps taken each 5 minutes across all days\")\r\n```\r\n\r\n### Finding Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps.\r\n\r\n```{r max}\r\nmaximum <- StepsPerInterval[which.max(StepsPerInterval$steps),\"interval\"]\r\n```\r\nThe 5-minute interval contains the maximum number of steps is = `r maximum`\r\n\r\n\r\n## Imputing missing values\r\n\r\n### Calculating and reporting the total number of missing values in the dataset \r\n\r\n```{r numberofNAs}\r\nTotalNAs <- sum(is.na(activities$steps))\r\n```\r\nTotal number of missing values in the dataset is = `r TotalNAs`\r\n\r\n### Devising a strategy for filling in all of the missing values in the dataset. \r\nWe used the following strategy.  \r\nWhenever there is a missing value we use the mean for that 5-minute interval \r\ncorrespond to that value instead of the NA.  \r\n\r\n### Creating a new dataset that is equal to the original dataset but with the missing data filled in.\r\n\r\nWe made a new dataset **activities2** to store the filled NA dataset, and apply the previous strategy.\r\n\r\n```{r fillNAs}\r\nactivities2 <- activities\r\nfor (i in 1:nrow(activities2))\r\n        if(is.na(activities2$steps[i]))\r\n                activities2$steps[i] <- subset(StepsPerInterval, interval==activities2$interval[i])$steps\r\n```\r\n\r\nAfter executing the previous code we may check that **activities2** doesn't have any NA values.\r\n\r\n```{r is_na_activities2}\r\nsum(is.na(activities2$steps))\r\n```\r\n\r\n### Making a histogram of the total number of steps taken each day \r\n\r\n```{r histogram_after_fill_na}\r\nStepsPerDay2 <- aggregate(activities2[\"steps\"], by=activities2[\"date\"], FUN=sum, na.rm=TRUE)\r\nplot(StepsPerDay2$date, StepsPerDay2$steps, type=\"h\", lwd=3, col=\"green\", xlab=\"Date\", \r\n     ylab=\"Total steps\", main=\"Total steps taken each day After Imputing missing values\")\r\n```\r\n\r\n### Calculating and report the mean and median total number of steps taken per day. \r\n\r\n```{r mean_median_after_fill_na}\r\nMean2 <- mean(StepsPerDay2$steps, na.rm=TRUE)\r\nsprintf(\"Mean = %.2f\", Mean2)\r\nMedian2 <- median(StepsPerDay2$steps, na.rm=TRUE)\r\nsprintf(\"Median = %.2f\", Median2)\r\n```\r\n\r\n\r\n### Do these values differ from the estimates from the first part of the assignment?\r\nYes in fact, the mean and median values differ from the estimates from the first part of the assignment.  \r\n\r\n### What is the impact of imputing missing data on the estimates of the total daily number of steps?\r\nAfter Imputing missing values stage, we notice that both the mean and the median number did increase.  \r\nThe mean increased from `r Mean` to `r format(Mean2, scientific = F)`.  \r\nThe median increased from `r Median` to `r format(Median2, scientific = F)`.  \r\n\r\n\r\n## Are there differences in activity patterns between weekdays and weekends?\r\n\r\n\r\n### Creating a new factor variable in the dataset with two levels- \"weekday\" and \"weekend\" indicating whether a given date is a weekday or weekend day.\r\n\r\nFirst, we define a function **f** that determine whether a given date is a weekday or a weekend day.\r\n```{r week_function}\r\nf <- function(d){\r\n        if (weekdays(d)==\"Saturday\" || weekdays(d)==\"Sunday\") \"weekend\"\r\n        else \"weekday\"\r\n}\r\n```\r\n\r\nThen we apply this function **f** to create a factor variable in the dataset.\r\n\r\n```{r weekday_weekend}\r\nactivities3 <- activities2\r\nactivities3$day <- as.factor(sapply(activities3$date, f))\r\n```\r\n\r\nLet us see a table to compare the number of weekdays and weekend days.\r\n```{r tabledays}\r\ntable(activities3$day)\r\n```\r\n\r\n### Making a panel plot containing a time series plot of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all weekday days or weekend days (y-axis).\r\n\r\n```{r plot_weekdays_weekends}\r\npar(mfrow=c(2,1))\r\n\r\nwith(subset(activities3, day==\"weekend\"),{\r\n        StepsPerInterval <- aggregate(steps ~ interval, FUN=mean)\r\n        plot(StepsPerInterval$interval, StepsPerInterval$steps, type=\"l\", lwd=2, col=\"blue\",\r\n             xlab=\"Interval\", ylab=\"Average number of steps\", \r\n             main=\"Weekend plot\")\r\n})\r\n\r\n\r\nwith(subset(activities3, day==\"weekday\"),{\r\n        StepsPerInterval <- aggregate(steps ~ interval, FUN=mean)\r\n        plot(StepsPerInterval$interval, StepsPerInterval$steps, type=\"l\", lwd=2, col=\"blue\",\r\n             xlab=\"Interval\", ylab=\"Average number of steps\", \r\n             main=\"Weekday plot\")\r\n})\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}